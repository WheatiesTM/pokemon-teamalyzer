import React from 'react';
import { TYPE_CHART, Pokemon, calculate, Move } from '@smogon/calc';
import { gen, validSpecies, validMove } from '../../utils';
import { observer } from 'mobx-react';
import 'mobx-react-lite/batchingForReactDom';
import OffensiveTable from './OffensiveTable';

@observer
class OffensiveTableTool extends React.Component {
  calcDamage(type1, type2, poke, move) {
    if (validSpecies(poke.species) && validMove(move.name)) {
      let attackerName = validSpecies(poke.species) ? poke.species : 'Ditto';
      const attacker = new Pokemon(gen, attackerName, {
        level: +this.props.teamState.level,
        item: poke.item,
        nature: poke.nature,
        gender: poke.gender,
        isDynamaxed: poke.isMax,
        ability: poke.ability,
        abilityOn: poke.abilityOn,
        status: poke.status,
        ivs: {
          hp: +poke.ivVals[0],
          atk: +poke.ivVals[1],
          def: +poke.ivVals[2],
          spa: +poke.ivVals[3],
          spd: +poke.ivVals[4],
          spe: +poke.ivVals[5],
        },
        evs: {
          hp: +poke.evVals[0],
          atk: +poke.evVals[1],
          def: +poke.evVals[2],
          spa: +poke.evVals[3],
          spd: +poke.evVals[4],
          spe: +poke.evVals[5],
        },
        boosts: {
          atk: +poke.boosts[1],
          def: +poke.boosts[2],
          spa: +poke.boosts[3],
          spd: +poke.boosts[4],
          spe: +poke.boosts[5],
        },
      });

      const defender = new Pokemon(gen, 'Ditto', {
        level: +this.props.teamState.level,
        nature: 'Serious',
        overrides: { types: [type1, type1 === type2 ? '???' : type2] },
      });

      const attack = new Move(gen, move.name);

      let result = calculate(gen, attacker, defender, attack);
      return result.range()[1];
    } else {
      return 0;
    }
  }

  genData() {
    //generate each row of data, first entry is the row title, rest of the entries are data generated by the calc function
    let damageData = Object.keys(TYPE_CHART[gen]).map(type2 => {
      let row = { rowTitle: type2 };
      Object.keys(TYPE_CHART[gen]).map(type1 =>
        Object.defineProperty(row, type1, {
          value: this.props.teamState.team
            .map(pokemon =>
              pokemon.moves
                .map(move => this.calcDamage(type1, type2, pokemon, move))
                .reduce((accumulator, currentValue) => accumulator + currentValue)
            )
            .reduce((accumulator, currentValue) => accumulator + currentValue),
        })
      );
      return row;
    });
    return damageData;
  }

  genColumns() {
    let typeCols = Object.keys(TYPE_CHART[gen]).map((type, index) => ({ Header: type, accessor: type }));
    typeCols.unshift({ Header: '', accessor: 'rowTitle' });
    return typeCols;
  }
  render() {
    const columns = this.genColumns();

    //const data = React.useMemo(() => genData(props.teamState), [props.teamState]);
    //TODO only rerender when all pokemon are valid species
    const data = this.genData();

    return (
      <div>
        <input type="button" onClick={() => this.genData()} value="ANALYZE" />
        <OffensiveTable columns={columns} data={data} />
      </div>
    );
  }
}

export default observer(OffensiveTableTool);
