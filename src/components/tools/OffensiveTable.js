import React from 'react';
import { useTable } from 'react-table';
import { TYPE_CHART } from '@smogon/calc';
import { gen } from '../../utils';
import { observer } from 'mobx-react';
import 'mobx-react-lite/batchingForReactDom';

function OffensiveTable(props) {
  function calcDamage(type1, type2) {
    return props.teamState.level;
  }

  function genData() {
    //generate each row of data, first entry is the row title, rest of the entries are data generated by the calc function
    let damageData = Object.keys(TYPE_CHART[gen]).map(type2 => {
      let row = { rowTitle: type2 };
      Object.keys(TYPE_CHART[gen]).map(type1 => Object.defineProperty(row, type1, { value: calcDamage(type1, type2) }));
      return row;
    });
    return damageData;
  }

  function genColumns() {
    let typeCols = Object.keys(TYPE_CHART[gen]).map((type, index) => ({ Header: type, accessor: type }));
    typeCols.unshift({ Header: '', accessor: 'rowTitle' });
    return typeCols;
  }

  const columns = React.useMemo(() => genColumns(), []);

  const data = React.useMemo(() => genData(props.teamState.level), [props.teamState.level]);

  return (
    <div>
      <Table columns={columns} data={data} />
    </div>
  );

  function Table({ columns, data }) {
    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data });

    return (
      <div>
        <table {...getTableProps()}>
          <thead>
            {headerGroups.map(headerGroup => (
              <tr {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map(column => (
                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody {...getTableBodyProps()}>
            {rows.map(row => {
              prepareRow(row);
              return (
                <tr {...row.getRowProps()}>
                  {row.cells.map(cell => {
                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;
                  })}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    );
  }
}

export default observer(OffensiveTable);
